
Dinusha_Ir_Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000242  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2f  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000421  00000000  00000000  00001509  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048e  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  7a:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
#define LCD_Port PORTB			/* Define LCD data port */
#define RS PB0				/* Define Register Select pin */
#define EN PB1
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<EN);		/* Enable pulse */
  94:	98 b3       	in	r25, 0x18	; 24
  96:	92 60       	ori	r25, 0x02	; 2
  98:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  9c:	98 b3       	in	r25, 0x18	; 24
  9e:	9d 7f       	andi	r25, 0xFD	; 253
  a0:	98 bb       	out	0x18, r25	; 24
  a2:	32 e4       	ldi	r19, 0x42	; 66
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Command+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
  aa:	28 b3       	in	r18, 0x18	; 24
  ac:	30 e1       	ldi	r19, 0x10	; 16
  ae:	83 9f       	mul	r24, r19
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	92 2f       	mov	r25, r18
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	89 2b       	or	r24, r25
  ba:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	83 ef       	ldi	r24, 0xF3	; 243
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Command+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Command+0x52>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <LCD_Char>:
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
  d8:	98 b3       	in	r25, 0x18	; 24
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	28 2f       	mov	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	92 2b       	or	r25, r18
  e2:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	91 60       	ori	r25, 0x01	; 1
  e8:	98 bb       	out	0x18, r25	; 24
	LCD_Port|= (1<<EN);
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	92 60       	ori	r25, 0x02	; 2
  ee:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  f2:	98 b3       	in	r25, 0x18	; 24
  f4:	9d 7f       	andi	r25, 0xFD	; 253
  f6:	98 bb       	out	0x18, r25	; 24
  f8:	32 e4       	ldi	r19, 0x42	; 66
  fa:	3a 95       	dec	r19
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Char+0x22>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Char+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 100:	28 b3       	in	r18, 0x18	; 24
 102:	30 e1       	ldi	r19, 0x10	; 16
 104:	83 9f       	mul	r24, r19
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	92 2f       	mov	r25, r18
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 2b       	or	r24, r25
 110:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 112:	88 b3       	in	r24, 0x18	; 24
 114:	82 60       	ori	r24, 0x02	; 2
 116:	88 bb       	out	0x18, r24	; 24
 118:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	83 ef       	ldi	r24, 0xF3	; 243
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_Char+0x4c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Char+0x52>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	87 bb       	out	0x17, r24	; 23
 132:	87 e8       	ldi	r24, 0x87	; 135
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Init+0x8>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Init+0xe>
 13c:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 15c:	83 ef       	ldi	r24, 0xF3	; 243
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Init+0x32>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Init+0x38>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <LCD_String>:
	_delay_ms(2);
}


void LCD_String (char *str)		/* Send string to LCD function */
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	03 c0       	rjmp	.+6      	; 0x180 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
 17a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	f8 01       	movw	r30, r16
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	80 81       	ld	r24, Z
 188:	81 11       	cpse	r24, r1
 18a:	f7 cf       	rjmp	.-18     	; 0x17a <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 19c:	81 11       	cpse	r24, r1
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <LCD_String_xy+0x1a>
 1a0:	60 31       	cpi	r22, 0x10	; 16
 1a2:	30 f4       	brcc	.+12     	; 0x1b0 <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 1a4:	86 2f       	mov	r24, r22
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	39 f4       	brne	.+14     	; 0x1c2 <LCD_String_xy+0x2c>
 1b4:	60 31       	cpi	r22, 0x10	; 16
 1b6:	28 f4       	brcc	.+10     	; 0x1c2 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 1b8:	86 2f       	mov	r24, r22
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	80 6c       	ori	r24, 0xC0	; 192
 1be:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_String>
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1d4:	83 ef       	ldi	r24, 0xF3	; 243
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_Clear+0xa>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_Clear+0x10>
 1de:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1e6:	08 95       	ret

000001e8 <main>:
}
int main(void)
{
	LCD_Init();
 1e8:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_Init>
    	DDRC=DDRC |(1<<PC0);
 1ec:	84 b3       	in	r24, 0x14	; 20
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		
		
		if(bit_is_clear(PINA,PA0)) {    
 1f2:	c8 99       	sbic	0x19, 0	; 25
 1f4:	12 c0       	rjmp	.+36     	; 0x21a <main+0x32>
			LCD_Clear();
 1f6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_Clear>
		LCD_String_xy(0,0,"IR ON");
 1fa:	40 e6       	ldi	r20, 0x60	; 96
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_String_xy>
 206:	2f e3       	ldi	r18, 0x3F	; 63
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	93 e0       	ldi	r25, 0x03	; 3
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x24>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x2e>
 216:	00 00       	nop
 218:	ec cf       	rjmp	.-40     	; 0x1f2 <main+0xa>
		_delay_ms(1000);

		} else{
		
		LCD_Clear(); 
 21a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_Clear>
		LCD_String_xy(0,0,"IR OFF");      
 21e:	46 e6       	ldi	r20, 0x66	; 102
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_String_xy>
 22a:	2f e3       	ldi	r18, 0x3F	; 63
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x48>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x52>
 23a:	00 00       	nop
 23c:	da cf       	rjmp	.-76     	; 0x1f2 <main+0xa>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
